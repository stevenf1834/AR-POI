//
//  ARPOIUI.swift
//  AR POI
//
//  Created by Jamie Perkins on 9/28/17.
//  Copyright Â© 2017 Inorganik Produce, Inc.. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ARPOIUI : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawTooltipLabel(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 73), color: UIColor = UIColor(red: 0.126, green: 0.582, blue: 1.000, alpha: 1.000), distanceText: String = "62.4", distUnitsText: String = "miles") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let tooltipBkgd = UIColor(red: 0.844, green: 0.886, blue: 0.899, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.47)
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 5


        //// Subframes
        let distanceGroup: CGRect = CGRect(x: frame.minX + frame.width - 63, y: frame.minY + fastFloor((frame.height - 22) * 0.05882 - 0.5) + 1, width: 59, height: frame.height - 23 - fastFloor((frame.height - 22) * 0.05882 - 0.5))
        let arrowFrame = CGRect(x: frame.minX + fastFloor((frame.width - 40) * 0.50000 + 0.5), y: frame.minY + frame.height - 33, width: 40, height: 33)


        //// tooltip Drawing
        let tooltipPath = UIBezierPath()
        tooltipPath.move(to: CGPoint(x: frame.maxX - 11.37, y: frame.minY + 3.72))
        tooltipPath.addLine(to: CGPoint(x: frame.maxX - 10.95, y: frame.minY + 3.82))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 4.82, y: frame.minY + 9.95), controlPoint1: CGPoint(x: frame.maxX - 8.1, y: frame.minY + 4.86), controlPoint2: CGPoint(x: frame.maxX - 5.86, y: frame.minY + 7.1))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 4, y: frame.minY + 19.82), controlPoint1: CGPoint(x: frame.maxX - 4, y: frame.minY + 12.55), controlPoint2: CGPoint(x: frame.maxX - 4, y: frame.minY + 14.97))
        tooltipPath.addLine(to: CGPoint(x: frame.maxX - 4, y: frame.maxY - 38.82))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 4.72, y: frame.maxY - 29.37), controlPoint1: CGPoint(x: frame.maxX - 4, y: frame.maxY - 33.97), controlPoint2: CGPoint(x: frame.maxX - 4, y: frame.maxY - 31.55))
        tooltipPath.addLine(to: CGPoint(x: frame.maxX - 4.82, y: frame.maxY - 28.95))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 10.95, y: frame.maxY - 22.82), controlPoint1: CGPoint(x: frame.maxX - 5.86, y: frame.maxY - 26.1), controlPoint2: CGPoint(x: frame.maxX - 8.1, y: frame.maxY - 23.86))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 20.82, y: frame.maxY - 22), controlPoint1: CGPoint(x: frame.maxX - 13.55, y: frame.maxY - 22), controlPoint2: CGPoint(x: frame.maxX - 15.97, y: frame.maxY - 22))
        tooltipPath.addLine(to: CGPoint(x: arrowFrame.maxX - 1.62, y: arrowFrame.maxY - 22))
        tooltipPath.addCurve(to: CGPoint(x: arrowFrame.maxX - 19.62, y: arrowFrame.maxY - 4), controlPoint1: CGPoint(x: arrowFrame.maxX - 4.26, y: arrowFrame.maxY - 19.36), controlPoint2: CGPoint(x: arrowFrame.maxX - 19.62, y: arrowFrame.maxY - 4))
        tooltipPath.addCurve(to: CGPoint(x: arrowFrame.minX + 2, y: arrowFrame.maxY - 22), controlPoint1: CGPoint(x: arrowFrame.maxX - 19.62, y: arrowFrame.maxY - 4), controlPoint2: CGPoint(x: arrowFrame.minX + 4.64, y: arrowFrame.maxY - 19.36))
        tooltipPath.addLine(to: CGPoint(x: frame.minX + 21.82, y: frame.maxY - 22))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 12.37, y: frame.maxY - 22.72), controlPoint1: CGPoint(x: frame.minX + 16.97, y: frame.maxY - 22), controlPoint2: CGPoint(x: frame.minX + 14.55, y: frame.maxY - 22))
        tooltipPath.addLine(to: CGPoint(x: frame.minX + 11.95, y: frame.maxY - 22.82))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 5.82, y: frame.maxY - 28.95), controlPoint1: CGPoint(x: frame.minX + 9.1, y: frame.maxY - 23.86), controlPoint2: CGPoint(x: frame.minX + 6.86, y: frame.maxY - 26.1))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 5, y: frame.maxY - 38.82), controlPoint1: CGPoint(x: frame.minX + 5, y: frame.maxY - 31.55), controlPoint2: CGPoint(x: frame.minX + 5, y: frame.maxY - 33.97))
        tooltipPath.addLine(to: CGPoint(x: frame.minX + 5, y: frame.minY + 19.82))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 5.72, y: frame.minY + 10.37), controlPoint1: CGPoint(x: frame.minX + 5, y: frame.minY + 14.97), controlPoint2: CGPoint(x: frame.minX + 5, y: frame.minY + 12.55))
        tooltipPath.addLine(to: CGPoint(x: frame.minX + 5.82, y: frame.minY + 9.95))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 11.95, y: frame.minY + 3.82), controlPoint1: CGPoint(x: frame.minX + 6.86, y: frame.minY + 7.1), controlPoint2: CGPoint(x: frame.minX + 9.1, y: frame.minY + 4.86))
        tooltipPath.addCurve(to: CGPoint(x: frame.minX + 21.82, y: frame.minY + 3), controlPoint1: CGPoint(x: frame.minX + 14.55, y: frame.minY + 3), controlPoint2: CGPoint(x: frame.minX + 16.97, y: frame.minY + 3))
        tooltipPath.addLine(to: CGPoint(x: frame.maxX - 20.82, y: frame.minY + 3))
        tooltipPath.addCurve(to: CGPoint(x: frame.maxX - 11.37, y: frame.minY + 3.72), controlPoint1: CGPoint(x: frame.maxX - 15.97, y: frame.minY + 3), controlPoint2: CGPoint(x: frame.maxX - 13.55, y: frame.minY + 3))
        tooltipPath.close()
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        tooltipBkgd.setFill()
        tooltipPath.fill()
        context.restoreGState()



        //// title label Drawing
        let titleLabelRect = CGRect(x: frame.minX + 11, y: frame.minY + 14, width: frame.width - 74, height: frame.height - 47)
        let titleLabelTextContent = "Hello, World!"
        let titleLabelStyle = NSMutableParagraphStyle()
        titleLabelStyle.alignment = .left
        let titleLabelFontAttributes = [
            .font: UIFont.systemFont(ofSize: 23, weight: UIFont.Weight.medium),
            .foregroundColor: UIColor.black,
            .paragraphStyle: titleLabelStyle,
        ] as [NSAttributedStringKey: Any]

        let titleLabelTextHeight: CGFloat = titleLabelTextContent.boundingRect(with: CGSize(width: titleLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: titleLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: titleLabelRect)
        titleLabelTextContent.draw(in: CGRect(x: titleLabelRect.minX, y: titleLabelRect.minY + (titleLabelRect.height - titleLabelTextHeight) / 2, width: titleLabelRect.width, height: titleLabelTextHeight), withAttributes: titleLabelFontAttributes)
        context.restoreGState()


        //// distance group
        //// color box Drawing
        let colorBoxPath = UIBezierPath()
        colorBoxPath.move(to: CGPoint(x: distanceGroup.minX + 51.63, y: distanceGroup.minY + 0.01501 * distanceGroup.height))
        colorBoxPath.addLine(to: CGPoint(x: distanceGroup.minX + 52.05, y: distanceGroup.minY + 0.01717 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 58.18, y: distanceGroup.minY + 0.14472 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 54.9, y: distanceGroup.minY + 0.03874 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 57.14, y: distanceGroup.minY + 0.08544 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.35032 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.19901 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.24945 * distanceGroup.height))
        colorBoxPath.addLine(to: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.64968 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 58.28, y: distanceGroup.minY + 0.84647 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.75055 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 59, y: distanceGroup.minY + 0.80099 * distanceGroup.height))
        colorBoxPath.addLine(to: CGPoint(x: distanceGroup.minX + 58.18, y: distanceGroup.minY + 0.85528 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 52.05, y: distanceGroup.minY + 0.98283 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 57.14, y: distanceGroup.minY + 0.91456 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 54.9, y: distanceGroup.minY + 0.96126 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 42.18, y: distanceGroup.minY + 1.00000 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 49.45, y: distanceGroup.minY + 1.00000 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 47.03, y: distanceGroup.minY + 1.00000 * distanceGroup.height))
        colorBoxPath.addLine(to: CGPoint(x: distanceGroup.minX, y: distanceGroup.minY + 1.00000 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX, y: distanceGroup.minY + 0.00000 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX, y: distanceGroup.minY + 0.73513 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX, y: distanceGroup.minY + 0.18528 * distanceGroup.height))
        colorBoxPath.addLine(to: CGPoint(x: distanceGroup.minX + 42.18, y: distanceGroup.minY + 0.00000 * distanceGroup.height))
        colorBoxPath.addCurve(to: CGPoint(x: distanceGroup.minX + 51.63, y: distanceGroup.minY + 0.01501 * distanceGroup.height), controlPoint1: CGPoint(x: distanceGroup.minX + 47.03, y: distanceGroup.minY + 0.00000 * distanceGroup.height), controlPoint2: CGPoint(x: distanceGroup.minX + 49.45, y: distanceGroup.minY + 0.00000 * distanceGroup.height))
        colorBoxPath.close()
        color.setFill()
        colorBoxPath.fill()


        //// distance label Drawing
        let distanceLabelRect = CGRect(x: distanceGroup.minX, y: distanceGroup.minY + fastFloor(distanceGroup.height * 0.00000 + 0.5), width: 59, height: fastFloor(distanceGroup.height * 0.83333 + 0.5) - fastFloor(distanceGroup.height * 0.00000 + 0.5))
        let distanceLabelStyle = NSMutableParagraphStyle()
        distanceLabelStyle.alignment = .center
        let distanceLabelFontAttributes = [
            .font: UIFont.systemFont(ofSize: 21, weight: UIFont.Weight.medium),
            .foregroundColor: UIColor.white,
            .paragraphStyle: distanceLabelStyle,
        ] as [NSAttributedStringKey: Any]

        let distanceLabelTextHeight: CGFloat = distanceText.boundingRect(with: CGSize(width: distanceLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: distanceLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: distanceLabelRect)
        distanceText.draw(in: CGRect(x: distanceLabelRect.minX, y: distanceLabelRect.minY + (distanceLabelRect.height - distanceLabelTextHeight) / 2, width: distanceLabelRect.width, height: distanceLabelTextHeight), withAttributes: distanceLabelFontAttributes)
        context.restoreGState()


        //// distance units Drawing
        let distanceUnitsRect = CGRect(x: distanceGroup.minX, y: distanceGroup.minY + fastFloor(distanceGroup.height * 0.50000 + 0.5), width: 59, height: fastFloor(distanceGroup.height * 1.00000 + 0.5) - fastFloor(distanceGroup.height * 0.50000 + 0.5))
        let distanceUnitsStyle = NSMutableParagraphStyle()
        distanceUnitsStyle.alignment = .center
        let distanceUnitsFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10, weight: UIFont.Weight.medium),
            .foregroundColor: UIColor.white,
            .paragraphStyle: distanceUnitsStyle,
        ] as [NSAttributedStringKey: Any]

        let distanceUnitsTextHeight: CGFloat = distUnitsText.boundingRect(with: CGSize(width: distanceUnitsRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: distanceUnitsFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: distanceUnitsRect)
        distUnitsText.draw(in: CGRect(x: distanceUnitsRect.minX, y: distanceUnitsRect.minY + (distanceUnitsRect.height - distanceUnitsTextHeight) / 2, width: distanceUnitsRect.width, height: distanceUnitsTextHeight), withAttributes: distanceUnitsFontAttributes)
        context.restoreGState()
    }

}
